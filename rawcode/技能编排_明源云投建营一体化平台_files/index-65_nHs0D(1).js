const p=function(){const s=typeof document<"u"&&document.createElement("link").relList;return s&&s.supports&&s.supports("modulepreload")?"modulepreload":"preload"}(),h=function(r){return"/gptbuilder/assistant/"+r},u={},E=function(s,i,P){let l=Promise.resolve();if(i&&i.length>0){document.getElementsByTagName("link");const o=document.querySelector("meta[property=csp-nonce]"),e=o?.nonce||o?.getAttribute("nonce");l=Promise.allSettled(i.map(t=>{if(t=h(t),t in u)return;u[t]=!0;const c=t.endsWith(".css"),d=c?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${t}"]${d}`))return;const n=document.createElement("link");if(n.rel=c?"stylesheet":p,c||(n.as="script"),n.crossOrigin="",n.href=t,e&&n.setAttribute("nonce",e),document.head.appendChild(n),c)return new Promise((m,f)=>{n.addEventListener("load",m),n.addEventListener("error",()=>f(new Error(`Unable to preload CSS for ${t}`)))})}))}function a(o){const e=new Event("vite:preloadError",{cancelable:!0});if(e.payload=o,window.dispatchEvent(e),!e.defaultPrevented)throw o}return l.then(o=>{for(const e of o||[])e.status==="rejected"&&a(e.reason);return s().catch(a)})},v=new URL(import.meta.url),y=!1,w=v.searchParams.get("source");(w||y)&&E(async()=>{const{defineMain:r}=await import("./define-andTyetD.js");return{defineMain:r}},[]).then(({defineMain:r})=>{r(import.meta)});export{E as _};
